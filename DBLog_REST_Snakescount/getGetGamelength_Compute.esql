

CREATE COMPUTE MODULE getGetGamelength_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		
		SET Environment.msg = InputLocalEnvironment.Destination.HTTP.RequestIdentifier;
		DECLARE msg_id CHARACTER CAST(Environment.msg AS CHARACTER );
		SET Environment.ipadd = InputRoot.HTTPInputHeader."X-Server-Name";
		DECLARE channelreq,hostreq REFERENCE TO InputRoot.HTTPInputHeader."X-Query-String";
		DECLARE TIME_STAMP CHARACTER CURRENT_TIMESTAMP;
	
		DECLARE ref REFERENCE TO  InputLocalEnvironment.HTTP.Input.QueryString.Gamenumber;
		DECLARE query CHARACTER 'select * from snakes_count where Gamenumber='||ref||''; 
		SET OutputRoot.JSON.Data.details=PASSTHRU(query);
	
		
		DECLARE Response BLOB ASBITSTREAM(OutputRoot.JSON.Data ENCODING InputRoot.Properties.Encoding  CCSID InputRoot.Properties.CodedCharSetId);
		DECLARE channelRes,hostres CHARACTER CAST(Response AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);	
		CALL snakelog(msg_id,channelreq,hostreq,hostres,channelRes,ApplicationLabel,MessageFlowLabel,Environment.ipadd,TIME_STAMP);
	END;
END MODULE;
CREATE PROCEDURE snakelog (IN MSG_ID CHARACTER, IN CHANNELREQ CHARACTER, IN HOSTREQ CHARACTER, IN HOSTRES CHARACTER,IN CHANNELRES CHARACTER,IN APPLICATION_NAME CHARACTER, IN MESSAGEFLOW CHARACTER,IN IP_ADD CHARACTER, IN TIMESTAMP_1 CHARACTER )
LANGUAGE DATABASE
EXTERNAL NAME "DB_LOGSPROCEDURE";
